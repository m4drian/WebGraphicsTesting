/**
 * Enables an Entity to render a Gaussian Splat (asset of the 'gsplat' type).
 *
 * @category Graphics
 */
export class GSplatComponent extends Component {
    /**
     * Create a new GSplatComponent.
     *
     * @param {import('./system.js').GSplatComponentSystem} system - The ComponentSystem that
     * created this Component.
     * @param {import('../../entity.js').Entity} entity - The Entity that this Component is
     * attached to.
     */
    constructor(system: import('./system.js').GSplatComponentSystem, entity: import('../../entity.js').Entity);
    /** @private */
    private _layers;
    /**
     * @type {import('../../../scene/gsplat/gsplat-instance.js').GSplatInstance|null}
     * @private
     */
    private _instance;
    /**
     * @type {import('../../../core/shape/bounding-box.js').BoundingBox|null}
     * @private
     */
    private _customAabb;
    /**
     * @type {AssetReference}
     * @private
     */
    private _assetReference;
    /**
     * @type {import('../../../scene/gsplat/gsplat-material.js').SplatMaterialOptions|null}
     * @private
     */
    private _materialOptions;
    /**
     * If set, the object space bounding box is used as a bounding box for visibility culling of
     * attached gsplat. This allows a custom bounding box to be specified.
     *
     * @type {import('../../../core/shape/bounding-box.js').BoundingBox}
     */
    set customAabb(value: import("../../../core/shape/bounding-box.js").BoundingBox);
    get customAabb(): import("../../../core/shape/bounding-box.js").BoundingBox;
    /**
     * A {@link GSplatInstance} contained in the component. If not set or loaded, it returns null.
     *
     * @ignore
     */
    set instance(value: import("../../../scene/gsplat/gsplat-instance.js").GSplatInstance);
    get instance(): import("../../../scene/gsplat/gsplat-instance.js").GSplatInstance;
    set materialOptions(value: import("../../../scene/gsplat/gsplat-material.js").SplatMaterialOptions);
    get materialOptions(): import("../../../scene/gsplat/gsplat-material.js").SplatMaterialOptions;
    /**
     * Material used to render the gsplat.
     *
     * @type {import('../../../scene/materials/material.js').Material|undefined}
     */
    get material(): import("../../../scene/materials/material.js").Material;
    /**
     * An array of layer IDs ({@link Layer#id}) to which gsplats should belong. Don't push, pop,
     * splice or modify this array, if you want to change it - set a new one instead.
     *
     * @type {number[]}
     */
    set layers(value: number[]);
    get layers(): number[];
    /**
     * The gsplat asset for the gsplat component - can also be an asset id.
     *
     * @type {Asset|number}
     */
    set asset(value: any);
    get asset(): any;
    /**
     * Assign asset id to the component, without updating the component with the new asset.
     * This can be used to assign the asset id to already fully created component.
     *
     * @param {Asset|number} asset - The gsplat asset or asset id to assign.
     * @ignore
     */
    assignAsset(asset: Asset | number): void;
    /** @private */
    private destroyInstance;
    /** @private */
    private addToLayers;
    removeFromLayers(): void;
    /** @private */
    private onRemoveChild;
    /** @private */
    private onInsertChild;
    onRemove(): void;
    onLayersChanged(oldComp: any, newComp: any): void;
    onLayerAdded(layer: any): void;
    onLayerRemoved(layer: any): void;
    /**
     * Stop rendering this component without removing its mesh instance from the scene hierarchy.
     */
    hide(): void;
    /**
     * Enable rendering of the component if hidden using {@link GSplatComponent#hide}.
     */
    show(): void;
    _onGSplatAssetAdded(): void;
    _onGSplatAssetLoad(): void;
    _onGSplatAssetUnload(): void;
    _onGSplatAssetRemove(): void;
}
import { Component } from '../component.js';
import { Asset } from '../../asset/asset.js';
