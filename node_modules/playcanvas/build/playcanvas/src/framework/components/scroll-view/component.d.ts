/**
 * A ScrollViewComponent enables a group of entities to behave like a masked scrolling area, with
 * optional horizontal and vertical scroll bars.
 *
 * @category User Interface
 */
export class ScrollViewComponent extends Component {
    /**
     * Fired whenever the scroll position changes. The handler is passed a {@link Vec2} containing
     * the horizontal and vertical scroll values in the range 0..1.
     *
     * @event
     * @example
     * entity.scrollview.on('set:scroll', (scroll) => {
     *     console.log(`Horizontal scroll position: ${scroll.x}`);
     *     console.log(`Vertical scroll position: ${scroll.y}`);
     * });
     */
    static EVENT_SETSCROLL: string;
    /**
     * Create a new ScrollViewComponent.
     *
     * @param {import('./system.js').ScrollViewComponentSystem} system - The ComponentSystem that
     * created this Component.
     * @param {import('../../entity.js').Entity} entity - The Entity that this Component is
     * attached to.
     */
    constructor(system: import('./system.js').ScrollViewComponentSystem, entity: import('../../entity.js').Entity);
    _viewportReference: EntityReference;
    _contentReference: EntityReference;
    _scrollbarUpdateFlags: {};
    _scrollbarReferences: {};
    _prevContentSizes: {};
    _scroll: Vec2;
    _velocity: Vec3;
    _dragStartPosition: Vec3;
    _disabledContentInput: boolean;
    _disabledContentInputEntities: any[];
    /**
     * @type {import('./data.js').ScrollViewComponentData}
     * @ignore
     */
    get data(): import("./data.js").ScrollViewComponentData;
    /**
     * Whether to enable horizontal scrolling.
     *
     * @type {boolean}
     */
    set horizontal(arg: boolean);
    get horizontal(): boolean;
    /**
     * Whether to enable vertical scrolling.
     *
     * @type {boolean}
     */
    set vertical(arg: boolean);
    get vertical(): boolean;
    /**
     * Specifies how the scroll view should behave when the user scrolls past the end of the content.
     * Modes are defined as follows:
     *
     * - {@link SCROLL_MODE_CLAMP}: Content does not scroll any further than its bounds.
     * - {@link SCROLL_MODE_BOUNCE}: Content scrolls past its bounds and then gently bounces back.
     * - {@link SCROLL_MODE_INFINITE}: Content can scroll forever.
     *
     * @type {number}
     */
    set scrollMode(arg: number);
    get scrollMode(): number;
    /**
     * Controls how far the content should move before bouncing back.
     *
     * @type {number}
     */
    set bounceAmount(arg: number);
    get bounceAmount(): number;
    /**
     * Controls how freely the content should move if thrown, i.e. By flicking on a phone or by
     * flinging the scroll wheel on a mouse. A value of 1 means that content will stop immediately;
     * 0 means that content will continue moving forever (or until the bounds of the content are
     * reached, depending on the scrollMode).
     *
     * @type {number}
     */
    set friction(arg: number);
    get friction(): number;
    /**
     * @type {number}
     * @ignore
     */
    set dragThreshold(arg: number);
    get dragThreshold(): number;
    /**
     * Whether to use mouse wheel for scrolling (horizontally and vertically).
     *
     * @type {boolean}
     */
    set useMouseWheel(arg: boolean);
    get useMouseWheel(): boolean;
    /**
     * Mouse wheel horizontal and vertical sensitivity. Only used if useMouseWheel is set. Setting a
     * direction to 0 will disable mouse wheel scrolling in that direction. 1 is a default
     * sensitivity that is considered to feel good. The values can be set higher or lower than 1 to
     * tune the sensitivity. Defaults to [1, 1].
     *
     * @type {Vec2}
     */
    set mouseWheelSensitivity(arg: Vec2);
    get mouseWheelSensitivity(): Vec2;
    /**
     * Controls whether the horizontal scrollbar should be visible all the time, or only visible
     * when the content exceeds the size of the viewport.
     *
     * @type {number}
     */
    set horizontalScrollbarVisibility(arg: number);
    get horizontalScrollbarVisibility(): number;
    /**
     * Controls whether the vertical scrollbar should be visible all the time, or only visible when
     * the content exceeds the size of the viewport.
     *
     * @type {number}
     */
    set verticalScrollbarVisibility(arg: number);
    get verticalScrollbarVisibility(): number;
    /**
     * The entity to be used as the masked viewport area, within which the content will scroll.
     * This entity must have an ElementGroup component.
     *
     * @type {import('../../../framework/entity.js').Entity}
     */
    set viewportEntity(arg: import("../../entity.js").Entity);
    get viewportEntity(): import("../../entity.js").Entity;
    /**
     * The entity which contains the scrolling content itself. This entity must have an Element
     * component.
     *
     * @type {import('../../../framework/entity.js').Entity}
     */
    set contentEntity(arg: import("../../entity.js").Entity);
    get contentEntity(): import("../../entity.js").Entity;
    /**
     * The entity to be used as the vertical scrollbar. This entity must have a Scrollbar component.
     *
     * @type {import('../../../framework/entity.js').Entity}
     */
    set horizontalScrollbarEntity(arg: import("../../entity.js").Entity);
    get horizontalScrollbarEntity(): import("../../entity.js").Entity;
    /**
     * The entity to be used as the vertical scrollbar. This entity must have a Scrollbar component.
     *
     * @type {import('../../../framework/entity.js').Entity}
     */
    set verticalScrollbarEntity(arg: import("../../entity.js").Entity);
    get verticalScrollbarEntity(): import("../../entity.js").Entity;
    /**
     * Set scroll value.
     *
     * @type {Vec2}
     */
    set scroll(value: Vec2);
    get scroll(): Vec2;
    /** @ignore */
    _setValue(name: any, value: any): void;
    /**
     * @param {string} onOrOff - 'on' or 'off'.
     * @param {import('./system.js').ScrollViewComponentSystem} system - The ComponentSystem that
     * created this Component.
     * @private
     */
    private _toggleLifecycleListeners;
    /**
     * @param {string} onOrOff - 'on' or 'off'.
     * @private
     */
    private _toggleElementListeners;
    _hasElementListeners: boolean;
    _onElementComponentAdd(entity: any): void;
    _onElementComponentRemove(entity: any): void;
    _onViewportElementGain(): void;
    _onContentElementGain(): void;
    _contentDragHelper: ElementDragHelper;
    _onContentElementLose(): void;
    _onContentDragStart(): void;
    _onContentDragEnd(): void;
    _prevContentDragPosition: any;
    _onContentDragMove(position: any): void;
    _wasDragged: boolean;
    _onSetContentOrViewportSize(): void;
    _onSetHorizontalScrollbarValue(scrollValueX: any): void;
    _onSetVerticalScrollbarValue(scrollValueY: any): void;
    _onSetHorizontalScrollingEnabled(): void;
    _onSetVerticalScrollingEnabled(): void;
    _onHorizontalScrollbarGain(): void;
    _onVerticalScrollbarGain(): void;
    _onSetScroll(x: any, y: any, resetVelocity: any): void;
    _updateAxis(scrollValue: any, axis: any, orientation: any): boolean;
    _determineNewScrollValue(scrollValue: any, axis: any, orientation: any): any;
    _syncAll(): void;
    _syncContentPosition(orientation: any): void;
    _syncScrollbarPosition(orientation: any): void;
    _syncScrollbarEnabledState(orientation: any): void;
    _contentIsLargerThanViewport(orientation: any): boolean;
    _contentPositionToScrollValue(contentPosition: any): Vec2;
    _getMaxOffset(orientation: any, contentSize: any): number;
    _getMaxScrollValue(orientation: any): 0 | 1;
    _getScrollbarHandleSize(axis: any, orientation: any): number;
    _getViewportSize(orientation: any): any;
    _getContentSize(orientation: any): any;
    _getSize(orientation: any, entityReference: any): any;
    _getScrollingEnabled(orientation: any): boolean;
    _getScrollbarVisibility(orientation: any): number;
    _getSign(orientation: any): 1 | -1;
    _getAxis(orientation: any): "x" | "y";
    _getCalculatedDimension(orientation: any): "calculatedWidth" | "calculatedHeight";
    _destroyDragHelper(): void;
    onUpdate(): void;
    _updateVelocity(): void;
    _hasOvershoot(axis: any, orientation: any): boolean;
    _toOvershoot(scrollValue: any, orientation: any): any;
    _setVelocityFromOvershoot(scrollValue: any, axis: any, orientation: any): void;
    _setVelocityFromContentPositionDelta(position: any): void;
    _setScrollFromContentPosition(position: any): void;
    _applyScrollValueTension(scrollValue: any): any;
    _isDragging(): boolean;
    _setScrollbarComponentsEnabled(enabled: any): void;
    _setContentDraggingEnabled(enabled: any): void;
    _onMouseWheel(event: any): void;
    _enableContentInput(): void;
    _disableContentInput(): void;
    onRemove(): void;
}
import { Component } from '../component.js';
import { EntityReference } from '../../utils/entity-reference.js';
import { Vec2 } from '../../../core/math/vec2.js';
import { Vec3 } from '../../../core/math/vec3.js';
import { ElementDragHelper } from '../element/element-drag-helper.js';
