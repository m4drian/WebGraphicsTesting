/**
 * The resource for the gsplat asset type.
 *
 * @category Graphics
 */
export class GSplatResource {
    /**
     * @param {import('../../platform/graphics/graphics-device.js').GraphicsDevice} device - The graphics device.
     * @param {import('../../scene/gsplat/gsplat-data.js').GSplatData} splatData - The splat data.
     * @ignore
     */
    constructor(device: import('../../platform/graphics/graphics-device.js').GraphicsDevice, splatData: import('../../scene/gsplat/gsplat-data.js').GSplatData);
    /**
     * @type {import('../../platform/graphics/graphics-device.js').GraphicsDevice}
     * @ignore
     */
    device: import('../../platform/graphics/graphics-device.js').GraphicsDevice;
    /**
     * @type {import('../../scene/gsplat/gsplat-data.js').GSplatData}
     * @ignore
     */
    splatData: import('../../scene/gsplat/gsplat-data.js').GSplatData;
    /**
     * @type {GSplat | GSplatCompressed | null}
     * @ignore
     */
    splat: GSplat | GSplatCompressed | null;
    destroy(): void;
    createSplat(): GSplat | GSplatCompressed;
    /**
     * Instantiates an entity with a {@link GSplatComponent}.
     *
     * @param {import('../../scene/gsplat/gsplat-material.js').SplatMaterialOptions} [options] - The options.
     * @returns {Entity} The entity with {@link GSplatComponent}.
     */
    instantiate(options?: import('../../scene/gsplat/gsplat-material.js').SplatMaterialOptions): Entity;
    createInstance(options?: {}): GSplatInstance;
}
import { GSplat } from '../../scene/gsplat/gsplat.js';
import { GSplatCompressed } from '../../scene/gsplat/gsplat-compressed.js';
import { Entity } from '../entity.js';
import { GSplatInstance } from '../../scene/gsplat/gsplat-instance.js';
