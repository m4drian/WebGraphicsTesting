/**
 * Callback used by {@link XrAnchorpersist }.
 */
export type XrAnchorPersistCallback = (err: Error | null, uuid: string | null) => any;
/**
 * Callback used by {@link XrAnchorforget }.
 */
export type XrAnchorForgetCallback = (err: Error | null) => any;
/**
 * Callback used by {@link XrAnchor#persist}.
 *
 * @callback XrAnchorPersistCallback
 * @param {Error|null} err - The Error object if failed to persist an anchor or null.
 * @param {string|null} uuid - unique string that can be used to restore {@link XRAnchor}
 * in another session.
 */
/**
 * Callback used by {@link XrAnchor#forget}.
 *
 * @callback XrAnchorForgetCallback
 * @param {Error|null} err - The Error object if failed to forget an anchor or null if succeeded.
 */
/**
 * An anchor keeps track of a position and rotation that is fixed relative to the real world.
 * This allows the application to adjust the location of the virtual objects placed in the
 * scene in a way that helps with maintaining the illusion that the placed objects are really
 * present in the userâ€™s environment.
 *
 * @category XR
 */
export class XrAnchor extends EventHandler {
    /**
     * Fired when an anchor is destroyed.
     *
     * @event
     * @example
     * // once anchor is destroyed
     * anchor.once('destroy', () => {
     *     // destroy its related entity
     *     entity.destroy();
     * });
     */
    static EVENT_DESTROY: string;
    /**
     * Fired when an anchor's position and/or rotation is changed.
     *
     * @event
     * @example
     * anchor.on('change', () => {
     *     // anchor has been updated
     *     entity.setPosition(anchor.getPosition());
     *     entity.setRotation(anchor.getRotation());
     * });
     */
    static EVENT_CHANGE: string;
    /**
     * Fired when an anchor has has been persisted. The handler is passed the UUID string that can
     * be used to restore this anchor.
     *
     * @event
     * @example
     * anchor.on('persist', (uuid) => {
     *     // anchor has been persisted
     * });
     */
    static EVENT_PERSIST: string;
    /**
     * Fired when an anchor has been forgotten.
     *
     * @event
     * @example
     * anchor.on('forget', () => {
     *     // anchor has been forgotten
     * });
     */
    static EVENT_FORGET: string;
    /**
     * @param {import('./xr-anchors.js').XrAnchors} anchors - Anchor manager.
     * @param {object} xrAnchor - native XRAnchor object that is provided by WebXR API
     * @param {string|null} uuid - ID string associated with a persistent anchor
     * @ignore
     */
    constructor(anchors: import('./xr-anchors.js').XrAnchors, xrAnchor: object, uuid?: string | null);
    /**
     * @type {Vec3}
     * @private
     */
    private _position;
    /**
     * @type {Quat}
     * @private
     */
    private _rotation;
    /**
     * @type {string|null}
     * @private
     */
    private _uuid;
    /**
     * @type {string[]|null}
     * @private
     */
    private _uuidRequests;
    _anchors: import("./xr-anchors.js").XrAnchors;
    _xrAnchor: any;
    /**
     * Destroy an anchor.
     */
    destroy(): void;
    /**
     * @param {*} frame - XRFrame from requestAnimationFrame callback.
     * @ignore
     */
    update(frame: any): void;
    /**
     * Get the world space position of an anchor.
     *
     * @returns {Vec3} The world space position of an anchor.
     */
    getPosition(): Vec3;
    /**
     * Get the world space rotation of an anchor.
     *
     * @returns {Quat} The world space rotation of an anchor.
     */
    getRotation(): Quat;
    /**
     * This method provides a way to persist anchor between WebXR sessions by
     * providing a unique UUID of an anchor, that can be used later for restoring
     * an anchor from underlying system.
     * Bear in mind that underlying systems might have a limit on number of anchors
     * allowed to be persisted per origin.
     *
     * @param {XrAnchorPersistCallback} [callback] - Callback to fire when anchor
     * persistent UUID has been generated or error if failed.
     */
    persist(callback?: XrAnchorPersistCallback): void;
    /**
     * Remove persistent UUID of an anchor from an underlying system.
     *
     * @param {XrAnchorForgetCallback} [callback] - Callback to fire when anchor has been
     * forgotten or error if failed.
     */
    forget(callback?: XrAnchorForgetCallback): void;
    /**
     * UUID string of a persistent anchor or null if not persisted.
     *
     * @type {null|string}
     */
    get uuid(): string;
    /**
     * True if an anchor is persistent.
     *
     * @type {boolean}
     */
    get persistent(): boolean;
}
import { EventHandler } from '../../core/event-handler.js';
import { Vec3 } from '../../core/math/vec3.js';
import { Quat } from '../../core/math/quat.js';
