/**
 * Local coordinate space.
 *
 * @type {string}
 * @category Gizmo
 */
export const GIZMO_LOCAL: string;
/**
 * World coordinate space.
 *
 * @type {string}
 * @category Gizmo
 */
export const GIZMO_WORLD: string;
/**
 * The base class for all gizmos.
 *
 * @category Gizmo
 */
export class Gizmo extends EventHandler {
    /**
     * Fired when the pointer is down on the gizmo.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('pointer:down', (x, y, meshInstance) => {
     *     console.log(`Pointer was down on ${meshInstance.node.name} at ${x}, ${y}`);
     * });
     */
    static EVENT_POINTERDOWN: string;
    /**
     * Fired when the pointer is moving over the gizmo.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('pointer:move', (x, y, meshInstance) => {
     *     console.log(`Pointer was moving on ${meshInstance.node.name} at ${x}, ${y}`);
     * });
     */
    static EVENT_POINTERMOVE: string;
    /**
     * Fired when the pointer is up off the gizmo.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('pointer:up', (x, y, meshInstance) => {
     *     console.log(`Pointer was up on ${meshInstance.node.name} at ${x}, ${y}`);
     * })
     */
    static EVENT_POINTERUP: string;
    /**
     * Fired when the gizmo's position is updated.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('position:update', (position) => {
     *     console.log(`The gizmo's position was updated to ${position}`);
     * })
     */
    static EVENT_POSITIONUPDATE: string;
    /**
     * Fired when the gizmo's rotation is updated.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('rotation:update', (rotation) => {
     *     console.log(`The gizmo's rotation was updated to ${rotation}`);
     * });
     */
    static EVENT_ROTATIONUPDATE: string;
    /**
     * Fired when the gizmo's scale is updated.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('scale:update', (scale) => {
     *     console.log(`The gizmo's scale was updated to ${scale}`);
     * });
     */
    static EVENT_SCALEUPDATE: string;
    /**
     * Fired when graph nodes are attached.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('nodes:attach', () => {
     *     console.log('Graph nodes attached');
     * });
     */
    static EVENT_NODESATTACH: string;
    /**
     * Fired when graph nodes are detached.
     *
     * @event
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.on('nodes:detach', () => {
     *     console.log('Graph nodes detached');
     * });
     */
    static EVENT_NODESDETACH: string;
    /**
     * Fired when when the gizmo render has updated.
     *
     * @event
     * @example
     * const gizmo = new pc.TransformGizmo(app, camera, layer);
     * gizmo.on('render:update', () => {
     *     console.log('Gizmo render has been updated');
     * });
     */
    static EVENT_RENDERUPDATE: string;
    /**
     * Creates a new Gizmo object.
     *
     * @param {import('../../framework/app-base.js').AppBase} app - The application instance.
     * @param {import('../../framework/components/camera/component.js').CameraComponent} camera -
     * The camera component.
     * @param {import('../../scene/layer.js').Layer} layer - The render layer.
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     */
    constructor(app: import('../../framework/app-base.js').AppBase, camera: import('../../framework/components/camera/component.js').CameraComponent, layer: import('../../scene/layer.js').Layer);
    /**
     * Internal device start size.
     *
     * @type {number}
     * @private
     */
    private _deviceStartSize;
    /**
     * Internal version of the gizmo size. Defaults to 1.
     *
     * @type {number}
     * @private
     */
    private _size;
    /**
     * Internal version of the gizmo scale. Defaults to 1.
     *
     * @type {number}
     * @protected
     */
    protected _scale: number;
    /**
     * Internal version of coordinate space. Defaults to {@link GIZMO_WORLD}.
     *
     * @type {string}
     * @protected
     */
    protected _coordSpace: string;
    /**
     * Internal reference to the app containing the gizmo.
     *
     * @type {import('../../framework/app-base.js').AppBase}
     * @protected
     */
    protected _app: import('../../framework/app-base.js').AppBase;
    /**
     * Internal reference to the graphics device of the app.
     *
     * @type {import('../../platform/graphics/graphics-device.js').GraphicsDevice}
     * @protected
     */
    protected _device: import('../../platform/graphics/graphics-device.js').GraphicsDevice;
    /**
     * Internal reference to camera component to view the gizmo.
     *
     * @type {import('../../framework/components/camera/component.js').CameraComponent}
     * @protected
     */
    protected _camera: import('../../framework/components/camera/component.js').CameraComponent;
    /**
     * Internal reference to layer to render the gizmo..
     *
     * @type {import('../../scene/layer.js').Layer}
     * @protected
     */
    protected _layer: import('../../scene/layer.js').Layer;
    /**
     * The graph nodes attached to the gizmo.
     *
     * @type {import('../../scene/graph-node.js').GraphNode[]}
     */
    nodes: import('../../scene/graph-node.js').GraphNode[];
    /**
     * The root gizmo entity.
     *
     * @type {import('../../framework/entity.js').Entity}
     */
    root: import('../../framework/entity.js').Entity;
    /**
     * @typedef IntersectData
     * @property {import('./tri-data.js').TriData[]} triData - The array of {@link TriData}
     * @property {import('../../scene/graph-node.js').GraphNode} parent - The mesh parent node.
     * @property {import('../../scene/mesh-instance.js').MeshInstance[]} meshInstances -
     * array of mesh instances for rendering
     */
    /**
     * The intersection data object.
     *
     * @type {IntersectData[]}
     */
    intersectData: {
        /**
         * - The array of {@link TriData }
         */
        triData: import('./tri-data.js').TriData[];
        /**
         * - The mesh parent node.
         */
        parent: import('../../scene/graph-node.js').GraphNode;
        /**
         * -
         * array of mesh instances for rendering
         */
        meshInstances: import('../../scene/mesh-instance.js').MeshInstance[];
    }[];
    _onPointerDown: (e: any) => void;
    _onPointerMove: (e: any) => void;
    _onPointerUp: (e: any) => void;
    /**
     * The gizmo coordinate space. Can be:
     *
     * - {@link GIZMO_LOCAL}
     * - {@link GIZMO_WORLD}
     *
     * Defaults to {@link GIZMO_WORLD}.
     *
     * @type {string}
     */
    set coordSpace(value: string);
    get coordSpace(): string;
    /**
     * The gizmo size. Defaults to 1.
     *
     * @type {number}
     */
    set size(value: number);
    get size(): number;
    _getProjFrustumWidth(): number;
    _createGizmo(): void;
    _updatePosition(): void;
    _updateRotation(): void;
    _updateScale(): void;
    _getSelection(x: any, y: any): import("../../scene/mesh-instance.js").MeshInstance[];
    /**
     * Attach an array of graph nodes to the gizmo.
     *
     * @param {import('../../scene/graph-node.js').GraphNode[]} [nodes] - The graph nodes. Defaults to [].
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.attach([boxA, boxB]);
     */
    attach(nodes?: import('../../scene/graph-node.js').GraphNode[]): void;
    /**
     * Detaches all graph nodes from the gizmo.
     *
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.attach([boxA, boxB]);
     * gizmo.detach();
     */
    detach(): void;
    /**
     * Destroys the gizmo instance; detaches
     * all graph nodes.
     *
     * @example
     * const gizmo = new pc.Gizmo(app, camera, layer);
     * gizmo.attach([boxA, boxB]);
     * gizmo.destroy();
     */
    destroy(): void;
}
import { EventHandler } from '../../core/event-handler.js';
