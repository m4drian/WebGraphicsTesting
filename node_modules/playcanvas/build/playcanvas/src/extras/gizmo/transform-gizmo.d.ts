/**
 * Shape axis for the line X.
 *
 * @type {string}
 */
export const SHAPEAXIS_X: string;
/**
 * Shape axis for the line Y.
 *
 * @type {string}
 */
export const SHAPEAXIS_Y: string;
/**
 * Shape axis for the line Z.
 *
 * @type {string}
 */
export const SHAPEAXIS_Z: string;
/**
 * Shape axis for the plane YZ.
 *
 * @type {string}
 */
export const SHAPEAXIS_YZ: string;
/**
 * Shape axis for the plane XZ.
 *
 * @type {string}
 */
export const SHAPEAXIS_XZ: string;
/**
 * Shape axis for the plane XY.
 *
 * @type {string}
 */
export const SHAPEAXIS_XY: string;
/**
 * Shape axis for all directions XYZ.
 *
 * @type {string}
 */
export const SHAPEAXIS_XYZ: string;
/**
 * Shape axis for facing the camera.
 *
 * @type {string}
 */
export const SHAPEAXIS_FACE: string;
/**
 * The base class for all transform gizmos.
 *
 * @category Gizmo
 */
export class TransformGizmo extends Gizmo {
    /**
     * Fired when when the transformation has started.
     *
     * @event
     * @example
     * const gizmo = new pc.TransformGizmo(app, camera, layer);
     * gizmo.on('transform:start', () => {
     *     console.log('Transformation started');
     * });
     */
    static EVENT_TRANSFORMSTART: string;
    /**
     * Fired during the transformation.
     *
     * @event
     * @example
     * const gizmo = new pc.TransformGizmo(app, camera, layer);
     * gizmo.on('transform:move', (pointDelta, angleDelta) => {
     *     console.log('Transformation moved by ${pointDelta} (angle: ${angleDelta})');
     * });
     */
    static EVENT_TRANSFORMMOVE: string;
    /**
     * Fired when when the transformation has ended.
     *
     * @event
     * @example
     * const gizmo = new pc.TransformGizmo(app, camera, layer);
     * gizmo.on('transform:end', () => {
     *     console.log('Transformation ended');
     * });
     */
    static EVENT_TRANSFORMEND: string;
    /**
     * Internal color alpha value.
     *
     * @type {number}
     * @private
     */
    private _colorAlpha;
    /**
     * Internal color for meshs.
     *
     * @type {Object}
     * @protected
     */
    protected _meshColors: any;
    /**
     * Internal version of the guide line color.
     *
     * @type {Object<string, Color>}
     * @protected
     */
    protected _guideColors: {
        [x: string]: Color;
    };
    /**
     * Internal gizmo starting rotation in world space.
     *
     * @type {Quat}
     * @protected
     */
    protected _rootStartRot: Quat;
    /**
     * Internal object containing the axis shapes to render.
     *
     * @type {Object.<string, import('./axis-shapes.js').AxisShape>}
     * @protected
     */
    protected _shapes: {
        [x: string]: import('./axis-shapes.js').AxisShape;
    };
    /**
     * Internal mapping of mesh instances to axis shapes.
     *
     * @type {Map<import('../../scene/mesh-instance.js').MeshInstance, import('./axis-shapes.js').AxisShape>}
     * @private
     */
    private _shapeMap;
    /**
     * Internal currently hovered shape.
     *
     * @type {import('./axis-shapes.js').AxisShape | null}
     * @private
     */
    private _hoverShape;
    /**
     * Internal currently hovered axis.
     *
     * @type {string}
     * @private
     */
    private _hoverAxis;
    /**
     * Internal state of if currently hovered shape is a plane.
     *
     * @type {boolean}
     * @private
     */
    private _hoverIsPlane;
    /**
     * Internal currently selected axis.
     *
     * @type {string}
     * @protected
     */
    protected _selectedAxis: string;
    /**
     * Internal state of if currently selected shape is a plane.
     *
     * @type {boolean}
     * @protected
     */
    protected _selectedIsPlane: boolean;
    /**
     * Internal selection starting coordinates in world space.
     *
     * @type {Vec3}
     * @protected
     */
    protected _selectionStartPoint: Vec3;
    /**
     * Internal selection starting angle in world space.
     *
     * @type {number}
     * @protected
     */
    protected _selectionStartAngle: number;
    /**
     * Internal state for if the gizmo is being dragged.
     *
     * @type {boolean}
     * @protected
     */
    protected _dragging: boolean;
    /**
     * Internal state for if snapping is enabled. Defaults to false.
     *
     * @type {boolean}
     * @private
     */
    private _snap;
    /**
     * Snapping increment. Defaults to 1.
     *
     * @type {number}
     */
    snapIncrement: number;
    /**
     * State for if snapping is enabled. Defaults to false.
     *
     * @type {boolean}
     */
    set snap(value: boolean);
    get snap(): boolean;
    /**
     * X axis color.
     *
     * @type {Color}
     */
    set xAxisColor(value: any);
    get xAxisColor(): any;
    /**
     * Y axis color.
     *
     * @type {Color}
     */
    set yAxisColor(value: any);
    get yAxisColor(): any;
    /**
     * Z axis color.
     *
     * @type {Color}
     */
    set zAxisColor(value: any);
    get zAxisColor(): any;
    /**
     * The color alpha for all axes.
     *
     * @type {number}
     */
    set colorAlpha(value: number);
    get colorAlpha(): number;
    _colorSemi(color: any): any;
    _updateAxisColor(axis: any, value: any): void;
    _getAxis(meshInstance: any): any;
    _getIsPlane(meshInstance: any): boolean;
    _hover(meshInstance: any): void;
    _createRay(mouseWPos: any): Ray;
    _createPlane(axis: any, isFacing: any, isLine: any): Plane;
    _projectToAxis(point: any, axis: any): void;
    _screenToPoint(x: any, y: any, isFacing?: boolean, isLine?: boolean): {
        point: Vec3;
        angle: number;
    };
    _drawGuideLines(): void;
    _drawSpanLine(pos: any, rot: any, axis: any): void;
    _createTransform(): void;
    /**
     * Set the shape to be enabled or disabled.
     *
     * @param {string} shapeAxis - The shape axis. Can be:
     *
     * {@link SHAPEAXIS_X}
     * {@link SHAPEAXIS_Y}
     * {@link SHAPEAXIS_Z}
     * {@link SHAPEAXIS_YZ}
     * {@link SHAPEAXIS_XZ}
     * {@link SHAPEAXIS_XY}
     * {@link SHAPEAXIS_XYZ}
     * {@link SHAPEAXIS_FACE}
     *
     * @param {boolean} enabled - The enabled state of shape.
     */
    enableShape(shapeAxis: string, enabled: boolean): void;
    /**
     * Get the enabled state of the shape.
     *
     * @param {string} shapeAxis - The shape axis. Can be:
     *
     * {@link SHAPEAXIS_X}
     * {@link SHAPEAXIS_Y}
     * {@link SHAPEAXIS_Z}
     * {@link SHAPEAXIS_YZ}
     * {@link SHAPEAXIS_XZ}
     * {@link SHAPEAXIS_XY}
     * {@link SHAPEAXIS_XYZ}
     * {@link SHAPEAXIS_FACE}
     *
     * @returns {boolean} - Then enabled state of the shape
     */
    isShapeEnabled(shapeAxis: string): boolean;
}
import { Gizmo } from "./gizmo.js";
import { Color } from '../../core/math/color.js';
import { Quat } from '../../core/math/quat.js';
import { Vec3 } from '../../core/math/vec3.js';
import { Ray } from '../../core/shape/ray.js';
import { Plane } from '../../core/shape/plane.js';
