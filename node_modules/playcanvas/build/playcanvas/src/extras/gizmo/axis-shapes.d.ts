export class AxisShape {
    constructor(device: any, options: any);
    _position: any;
    _rotation: any;
    _scale: any;
    _layers: any[];
    _disabled: any;
    _defaultColor: Color;
    _hoverColor: Color;
    _disabledColor: Readonly<Color>;
    _cull: number;
    device: any;
    axis: any;
    entity: any;
    triData: any[];
    meshInstances: any[];
    set disabled(value: any);
    get disabled(): any;
    _createRoot(name: any): void;
    _updateRootTransform(): void;
    _addRenderMeshes(entity: any, meshes: any): void;
    _addRenderShadowMesh(entity: any, type: any): void;
    hover(state: any): void;
    destroy(): void;
}
export class AxisArrow extends AxisShape {
    constructor(device: any, options?: {});
    _gap: number;
    _lineThickness: number;
    _lineLength: number;
    _arrowThickness: number;
    _arrowLength: number;
    _tolerance: number;
    triData: TriData[];
    set gap(value: number);
    get gap(): number;
    set lineThickness(value: number);
    get lineThickness(): number;
    set lineLength(value: number);
    get lineLength(): number;
    set arrowThickness(value: number);
    get arrowThickness(): number;
    set arrowLength(value: number);
    get arrowLength(): number;
    set tolerance(value: number);
    get tolerance(): number;
    _createArrow(): void;
    _head: Entity;
    _line: Entity;
    _updateHead(): void;
    _updateLine(): void;
}
export class AxisBoxCenter extends AxisShape {
    constructor(device: any, options?: {});
    _size: number;
    _tolerance: number;
    triData: TriData[];
    _createCenter(): void;
    set size(value: number);
    get size(): number;
    set tolerance(value: number);
    get tolerance(): number;
    _updateTransform(): void;
}
export class AxisBoxLine extends AxisShape {
    constructor(device: any, options?: {});
    _gap: number;
    _lineThickness: number;
    _lineLength: number;
    _boxSize: number;
    _tolerance: number;
    triData: TriData[];
    set gap(value: number);
    get gap(): number;
    set lineThickness(value: number);
    get lineThickness(): number;
    set lineLength(value: number);
    get lineLength(): number;
    set boxSize(value: number);
    get boxSize(): number;
    set tolerance(value: number);
    get tolerance(): number;
    _createBoxLine(): void;
    _box: Entity;
    _line: Entity;
    _updateBox(): void;
    _updateLine(): void;
}
export class AxisDisk extends AxisShape {
    constructor(device: any, options?: {});
    _tubeRadius: number;
    _ringRadius: number;
    _sectorAngle: any;
    _lightDir: any;
    _tolerance: number;
    triData: TriData[];
    _createTorusGeometry(): TorusGeometry;
    _createTorusMesh(sectorAngle: any): Mesh;
    _createDisk(): void;
    set tubeRadius(value: number);
    get tubeRadius(): number;
    set ringRadius(value: number);
    get ringRadius(): number;
    set tolerance(value: number);
    get tolerance(): number;
    _updateTransform(): void;
    drag(state: any): void;
    hide(state: any): void;
}
export class AxisPlane extends AxisShape {
    constructor(device: any, options?: {});
    _size: number;
    _gap: number;
    triData: TriData[];
    _getPosition(): Vec3;
    _createPlane(): void;
    set size(value: number);
    get size(): number;
    set gap(value: number);
    get gap(): number;
    _updateTransform(): void;
}
import { Color } from '../../core/math/color.js';
import { TriData } from './tri-data.js';
import { Entity } from '../../framework/entity.js';
import { TorusGeometry } from '../../scene/geometry/torus-geometry.js';
import { Mesh } from '../../scene/mesh.js';
import { Vec3 } from '../../core/math/vec3.js';
