/**
 * Rotation gizmo.
 *
 * @category Gizmo
 */
export class RotateGizmo extends TransformGizmo {
    _shapes: {
        z: AxisDisk;
        x: AxisDisk;
        y: AxisDisk;
        face: AxisDisk;
    };
    /**
     * Internal mapping from each attached node to their starting rotation in local space.
     *
     * @type {Map<import('../../scene/graph-node.js').GraphNode, Quat>}
     * @private
     */
    private _nodeLocalRotations;
    /**
     * Internal mapping from each attached node to their starting rotation in world space.
     *
     * @type {Map<import('../../scene/graph-node.js').GraphNode, Quat>}
     * @private
     */
    private _nodeRotations;
    /**
     * Internal mapping from each attached node to their offset position from the gizmo.
     *
     * @type {Map<import('../../scene/graph-node.js').GraphNode, Vec3>}
     * @private
     */
    private _nodeOffsets;
    /**
     * Internal color for guide angle starting line.
     *
     * @type {Color}
     * @private
     */
    private _guideAngleStartColor;
    /**
     * Internal vector for the start point of the guide line angle.
     *
     * @type {Vec3}
     * @private
     */
    private _guideAngleStart;
    /**
     * Internal vector for the end point of the guide line angle.
     *
     * @type {Vec3}
     * @private
     */
    private _guideAngleEnd;
    /**
     * XYZ tube radius.
     *
     * @type {number}
     */
    set xyzTubeRadius(value: number);
    get xyzTubeRadius(): number;
    /**
     * XYZ ring radius.
     *
     * @type {number}
     */
    set xyzRingRadius(value: number);
    get xyzRingRadius(): number;
    /**
     * Face tube radius.
     *
     * @type {number}
     */
    set faceTubeRadius(value: number);
    get faceTubeRadius(): number;
    /**
     * Face ring radius.
     *
     * @type {number}
     */
    set faceRingRadius(value: number);
    get faceRingRadius(): number;
    /**
     * Ring tolerance.
     *
     * @type {number}
     */
    set ringTolerance(value: number);
    get ringTolerance(): number;
    _setDiskProp(prop: any, value: any): void;
    _storeGuidePoints(): void;
    _updateGuidePoints(angleDelta: any): void;
    _drawGuideAngleLine(pos: any, axis: any, point: any, color?: Color): void;
    _getLookAtEulerAngles(position: any): Vec3;
    _faceAxisLookAtCamera(): void;
    _xyzAxisLookAtCamera(): void;
    _drag(state: any): void;
    _storeNodeRotations(): void;
    _setNodeRotations(axis: any, angleDelta: any): void;
    _screenToPoint(x: any, y: any): {
        point: Vec3;
        angle: number;
    };
}
import { TransformGizmo } from "./transform-gizmo.js";
import { AxisDisk } from './axis-shapes.js';
import { Color } from '../../core/math/color.js';
import { Vec3 } from '../../core/math/vec3.js';
