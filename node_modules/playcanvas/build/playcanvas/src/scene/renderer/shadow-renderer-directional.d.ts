/**
 * @ignore
 */
export class ShadowRendererDirectional {
    constructor(renderer: any, shadowRenderer: any);
    /** @type {import('./renderer.js').Renderer} */
    renderer: import('./renderer.js').Renderer;
    /** @type {import('./shadow-renderer.js').ShadowRenderer} */
    shadowRenderer: import('./shadow-renderer.js').ShadowRenderer;
    /** @type {import('../../platform/graphics/graphics-device.js').GraphicsDevice} */
    device: import('../../platform/graphics/graphics-device.js').GraphicsDevice;
    cull(light: any, comp: any, camera: any, casters?: any): void;
    generateSplitDistances(light: any, nearDist: any, farDist: any): void;
    /**
     * Create a render pass for directional light shadow rendering for a specified camera.
     *
     * @param {import('../light.js').Light} light - The directional light.
     * @param {import('../camera.js').Camera} camera - The camera.
     * @returns {RenderPassShadowDirectional|null} - The render pass if the shadow rendering is
     * required, or null otherwise.
     */
    getLightRenderPass(light: import('../light.js').Light, camera: import('../camera.js').Camera): RenderPassShadowDirectional | null;
}
import { RenderPassShadowDirectional } from './render-pass-shadow-directional.js';
